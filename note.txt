model
view
controllers
routes

Bank app

functions
    signup() 
        email
        name
        password
        account_no

    signin()
    deposit()
    withdraw()


Database
    user info


pages
    login page
    signup page
    dashboard


In Django

model = Database => ORM(object relational mapping)
CREATE TABLE user_table(id INT AUTO_INCREMENT PRIMARY KEY )
class User():
1. python manage.py makemigrations userApp => create a migration file(set code that would convert the class in the model into normal sql queries)
2. python manage.py migrate => apply the migration file to the database


template = html pages
urls = edu.sqi.ng/product - route configurations 


views = functions 

forms

categorizing our software
python manage.py startapp userApp
1. Users   - python manage.py startapp userApp
2. product
3. sales/transaction



# API => Apllication programming interface 
# API is a set of defined rules that enables applications to talk to each other
# means of communication => json(javascript object notation) => list of dictiontions
# mobile app => react native
# frontend web => react
# backend => django

[
    {'username':'admin', 'password': 1223},
    {'username':'admin', 'password': 1223},
]



SQL = Structured query language

DATABASE ->  A place where we can store, retrieve and manage data(informations)

DBMS -> database management system 
Two basic kinds DBMS
1. Relational DBMS(RDBMS) => SQL(Structured query language)
    i. Database => e.g ecommerce_db
    ii. Tables(rows and columns) NOTE: The tables are relatable e.g user_table, product_table
examples: mysql, postgreSQL, ORACLE, Microsoft SQL, SQLITE

mySql workbench
XAmmp

sublanguage in SQL

1. DDL => Data Definition language
i. CREATE DATABASE practice_db;
ii. CREATE TABLE user_table(id INT(4) PRIMARY KEY AUTO_INCREMENT, fullname VARCHAR(50), email VARCHAR(50) UNIQUE, date_created DATETIME DEFAULT CURRENT_TIMESTAMP )
iii. DROP TABLE user_table;
iv. DROP DATABASE practice_db;



2. Non Relational DBMS => NOSQL
i. cluster => two or more database are called cluster
ii. Database => e.g ecommerce_db
iii. Collections => one or more documents e.g user_collection, product_collection
[
    {
        id: 2,
        fullname: 'Ayo mide',
        age: 34  
    },
    {
        id: 2,
        fullname: 'Ayo mide',
        age: 34  
    }
]

iv. Documents => e.g     {
        id: 2,
        fullname: 'Ayo mide',
        age: 34  
    }

e.g noSQL => MONGODB, redis